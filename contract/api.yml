swagger: "2.0"
info:
  version: 1.0.0
  title: YACME (Yet Another Config Management Engine)
  description: Handles Kubernetes and Concourse configuration for services, so that devs never have to think about those things and get their work done

tags:
  - name: apps
    description: individual app interface
  - name: component_types
    description: Component registry
  - name: docs
    description: API contract definition
consumes:
  - application/vnd.api+json
produces:
  - application/vnd.api+json
paths:
  /apps:
    get:
      summary: List of all apps
      definitions: Full list of all apps registered in the system
      tags:
        - apps
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/app"
    post:
      summary: New app
      description: Creates a new app
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app"
      responses:
        201:
          description: Successfully created app
          schema:
            $ref: "#/definitions/app"
        400:
          description: Bad input
          schema:
            $ref: "#/definitions/errors"

  /apps/{app-slug}:
    get:
      summary: Individual app
      description: Show full list of properties for an app. Its pipeline link, components, etc.
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/appSlug"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/app"
        404:
          description: App not found
          schema:
            $ref: "#/definitions/errors"
    put:
      summary: Update individual app properties
      description: Update selective app properties for a specific app
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/appSlug"
        - $ref: "#/parameters/app"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/app"
        404:
          description: App not found
          schema:
            $ref: "#/definitions/errors"
    delete:
      summary: Delete app
      description:
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/appSlug"
      responses:
        200:
          description: OK
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors"

  /apps/{app-slug}/components:
    get:
      summary: List of components of app
      description: 
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/appSlug"
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/component"
        404:
          description: App not found
          schema:
            $ref: "#/definitions/errors"
    post:
      summary: New component for app
      description: Create a new component for an app
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/appSlug"
        - $ref: "#/parameters/component"
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/component"
        400:
          description: Bad input
          schema:
            $ref: "#/definitions/errors"
        404:
          description: App not found
          schema:
            $ref: "#/definitions/errors"

  /apps/{app-slug}/components/{component-slug}:
    get:
      summary: Individual app component
      description: 
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/appSlug"
        - $ref: "#/parameters/compoenentSlug"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/component"
        404:
          description: App or component not found
          schema:
            $ref: "#/definitions/errors"

    put:
      summary: Update app component
      description: 
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/appSlug"
        - $ref: "#/parameters/componentSlug"
        - $ref: "#/parameters/component"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/component"
        404:
          description: App or component not found
          schema:
            $ref: "#/definitions/errors"
    delete:
      summary: Delete app component
      description:
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/appSlug"
        - $ref: "#/parameters/componentSlug"
      responses:
        200:
          description: OK
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors"

  /component-types:
    get:
      summary: List of all known component_types
      description: 
      tags:
        - component_types
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              schema:
                $ref: "#/definitions/componentType"
    post:
      summary: Create new component type
      description: 
      tags:
        - component_types
      parameters:
        - $ref: "#/parameters/componentType"
      responses:
        201:
          description: New component type created
          schema:
            $ref: "#/definitions/componentType"
        400:
          description: Bad input
          schema:
            $ref: "#/definitions/errors"

  /component-types/{component-type-slug}:
    get:
      summary: Individual component details
      description:
      tags:
        - component_types
      parameters:
        - $ref: "#/parameters/componentTypeSlug"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/componentType"
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors"
    put:
      summary: Update component details
      description:
      tags:
        - component_types
      parameters:
        - $ref: "#/parameters/componentTypeSlug"
        - $ref: "#/parameters/componentType"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/componentType"
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors"
    delete:
      summary: Delete component type
      description:
      tags:
        - component_types
      parameters:
        - $ref: "#/parameters/componentTypeSlug"
      responses:
        200:
          description: OK
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors"

  /docs:
    get:
      summary: API Docs
      description: Swagger formatted API json. This document
      tags:
        - docs
      responses:
        200:
          description: OK

definitions:
  errors:
    type: object
    properties:
      errors:
        type: array
        items:
          type: string
        example:
          - Component type LOL-NOT-EVEN-REDIS was not found
        description: List of errors
  app:
    type: object
    properties:
      id:
        type: integer
        example: 1
        description: Unique ID for an app
      name:
        type: string
        example: YACME API
        description: Descriptive name for an app
      repo:
        type: string
        example: https://github.com/gaorlov/YACME
        description: Link to github repo
      url_slug:
        type: string
        example: yacme-api-1
        description: URL slug that is a combination of the name and ID
      description:
        type: string
        example: Config manager api
        description: |
          [OPTIONAL] description of the application
    description: |
      Full specification for an app pipeline. 

      [NOTE] Relationships block specifies the order of components that will form the pipeline.

  component:
    type: object
    properties:
      class:
        type: string
        enum:
          - object
          - action
        description: component class. Description in component_type.class field
      name:
        type: string
        example: rds-postgres
        description: name of the component
      params:
        type: object
        example:
          PD_USERNAME: root
          PG_PASSWORD: root-pass
          PG_HOST: postgres.internal.example.com
          PG_PORT: 5432
        description: Component-specific params
      dependencies:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: name of component
            action:
              type: string
              enum:
                - create
                - check
                - update
                - delete
                - execute
              description: component action
          example:
            - unit-tests: execute
              kafka: create
        description: array of component actions that need to pass before the current action will run.
    description: |
      App-specific component instance definition. 

  componentType:
    type: object
    properties:
      class:
        type: string
        enum:
          - object
          - action
        description: |
          * `object` - object components are centered around a resource definition that needs to be managed and should include `create`, `check`, `update`, and `delete` actions.
          * `action` - an action component is just that: a concourse step/job that gets executed (`execute` action)
      name:
        type: string
        example: RDS-based postgres
        description: Discriptive, unique name of the component
      params:
        type: 
      description:
        type: string
        example: Key-value storage hosted on AWS
        description: Description of the component
    description: |
      Component Type definition.

parameters:
  appSlug:
    name: app-slug
    in: query
    type: string
    example: yacme-api-1
    description: Url slug for an app

  componentSlug:
    name: component-slug
    in: query
    type: string
    example: yacme-api-1-aws-redis-12
    description: Url slug for an app component

  componentTypeSlug:
    name: component-type-slug
    in: query
    type: string
    description: Url slug for an component type

  app:
    name: app
    in: body
    type: object
    required:
      - name
      - repo
    properties:
      name:
        type: string
        example: YACME API
        description: App name
      repo:
        type: string
        example: https://github.com/gaorlov/YACME
        description: Github repo URL
      description:
        type: string
        example: Config manager api
        description: |
          [OPTIONAL] Description of app

  componentType:
    name: component-type
    in: body
    type: object
    required:
      - url
    properties:
      url:
        type: string
        example: http://rds-postgres-component.internal.example.com
        description: url to component_type service to be used to register a component service

  component:
    name: component
    in: body
    type: object
    required:
      - params
    properties:
      params:
        type: object
        example:
          PD_USERNAME: root
          PG_PASSWORD: root-pass
          PG_HOST: postgres.internal.example.com
          PG_PORT: 5432
        description: Param set for app-specific component definition
      dependencies:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: name of component
            action:
              type: string
              enum:
                - create
                - check
                - update
                - delete
                - execute
              description: component action
        example:
          - unit-tests: execute
            kafka: create
        description: array of component actions that need to pass before the current action will run.