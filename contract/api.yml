swagger: "2.0"
info:
  version: 1.0.0
  title: YACME (Yet Another Config Management Engine)
  description: Handles Kubernetes and Concourse configuration for services, so that devs never have to think about those things and get their work done

tags:
  - name: apps
    description: individual app interface
  - name: component-types
    description: Component registry
  - name: docs
    description: API contract definition
consumes:
  - application/vnd.api+json
produces:
  - application/vnd.api+json
paths:
  /apps:
    get:
      summary: List of all apps
      description: Full list of all apps registered in the system
      tags:
        - apps
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/app-response"
    post:
      summary: New app
      description: Creates a new app
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app"
      responses:
        201:
          description: Successfully created app
          schema:
            $ref: "#/definitions/app-response"
        400:
          description: Bad input
          schema:
            $ref: "#/definitions/errors-response"

  /apps/{app-id}:
    get:
      summary: Individual app
      description: Show full list of properties for an app. Its pipeline link, components, etc.
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app-id"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/app-response"
        404:
          description: App not found
          schema:
            $ref: "#/definitions/errors-response"
    put:
      summary: Update individual app properties
      description: Update selective app properties for a specific app
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app-id"
        - $ref: "#/parameters/app"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/app-response"
        404:
          description: App not found
          schema:
            $ref: "#/definitions/errors-response"
    delete:
      summary: Delete app
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app-id"
      responses:
        200:
          description: OK
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors-response"

  /apps/{app-id}/components:
    get:
      summary: List of components of app
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app-id"
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/component-response"
        404:
          description: App not found
          schema:
            $ref: "#/definitions/errors-response"
    post:
      summary: New component for app
      description: Create a new component for an app
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app-id"
        - $ref: "#/parameters/component"
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/component-response"
        400:
          description: Bad input
          schema:
            $ref: "#/definitions/errors-response"
        404:
          description: App not found
          schema:
            $ref: "#/definitions/errors-response"

  /apps/{app-id}/components/{component-id}:
    get:
      summary: Individual app component
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app-id"
        - $ref: "#/parameters/component-id"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/component-response"
        404:
          description: App or component not found
          schema:
            $ref: "#/definitions/errors-response"

    put:
      summary: Update app component
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app-id"
        - $ref: "#/parameters/component-id"
        - $ref: "#/parameters/component"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/component-response"
        404:
          description: App or component not found
          schema:
            $ref: "#/definitions/errors-response"
    delete:
      summary: Delete app component
      tags:
        - apps
      parameters:
        - $ref: "#/parameters/app-id"
        - $ref: "#/parameters/component-id"
      responses:
        200:
          description: OK
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors-response"

  /component-types:
    get:
      summary: List of all known component-types
      tags:
        - component-types
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/component-type-response"
    post:
      summary: Create new component type
      tags:
        - component-types
      parameters:
        - $ref: "#/parameters/component-type"
      responses:
        201:
          description: New component type created
          schema:
            $ref: "#/definitions/component-type-response"
        400:
          description: Bad input
          schema:
            $ref: "#/definitions/errors-response"

  /component-types/{component-type-id}:
    get:
      summary: Individual component details
      tags:
        - component-types
      parameters:
        - $ref: "#/parameters/component-type-id"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/component-type-response"
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors-response"
    put:
      summary: Update component details
      tags:
        - component-types
      parameters:
        - $ref: "#/parameters/component-type-id"
        - $ref: "#/parameters/component-type"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/component-type-response"
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors-response"
    delete:
      summary: Delete component type
      tags:
        - component-types
      parameters:
        - $ref: "#/parameters/component-type-id"
      responses:
        200:
          description: OK
        404:
          description: component type not found
          schema:
            $ref: "#/definitions/errors-response"

  /docs:
    get:
      summary: API Docs
      description: Swagger formatted API json. This document
      tags:
        - docs
      responses:
        200:
          description: OK

definitions:
  errors-response:
    type: object
    properties:
      errors:
        type: array
        items:
          type: string
        example:
          - Component type LOL-NOT-EVEN-REDIS was not found
        description: List of errors
  app-response:
    type: object
    properties:
      id:
        type: integer
        example: 1
        description: Unique ID for an app
      name:
        type: string
        example: YACME API
        description: Descriptive name for an app
      repo:
        type: string
        example: https://github.com/gaorlov/YACME
        description: Link to github repo
      description:
        type: string
        example: Config manager api
        description: |
          [OPTIONAL] description of the application
    description: |
      Full specification for an app pipeline. 

      [NOTE] Relationships block specifies the order of components that will form the pipeline.

  component-response:
    type: object
    properties:
      id:
        type: integer
        example: 12
        description: Unique ID for an app component
      type:
        type: string
        enum:
          - object
          - action
        description: component class. Description in component_type.class field
      name:
        type: string
        example: rds-postgres
        description: name of the component
      params:
        type: object
        example:
          PD_USERNAME: root
          PG_PASSWORD: root-pass
          PG_HOST: postgres.internal.example.com
          PG_PORT: 5432
        description: Component-specific params
      dependencies:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: name of component
            action:
              type: string
              enum:
                - create
                - check
                - update
                - delete
                - execute
              description: component action
          example:
            - unit-tests: execute
              kafka: create
        description: array of component actions that need to pass before the current action will run.
    description: |
      App-specific component instance definition. 

  component-type-response:
    type: object
    properties:
      id:
        type: integer
        example: 8
        description: Unique ID for a component type
      type:
        type: string
        enum:
          - object
          - action
        description: |
          * `object` - object components are centered around a resource definition that needs to be managed and should include `create`, `check`, `update`, and `delete` actions.
          * `action` - an action component is just that: a concourse step/job that gets executed (`execute` action)
      name:
        type: string
        example: RDS-based postgres
        description: Discriptive, unique name of the component
      url:
        type: string
        example: http://rds-postgres-component.internal.example.com
        description: url to component_type service to be used to register a component service
      params:
        type: object
        description: Param set for creating/updating a new compoenent of this type
        example:
          PD_USERNAME: root
          PG_PASSWORD: root-pass
          PG_HOST: postgres.internal.example.com
          PG_PORT: 5432
      description:
        type: string
        example: Key-value storage hosted on AWS
        description: Description of the component
    description: |
      Component Type definition.

parameters:
  app-id:
    name: app-id
    in: path
    type: string
    required: true
    description: ID of an app

  component-id:
    name: component-id
    in: path
    type: string
    required: true
    description: ID of an app component

  component-type-id:
    name: component-type-id
    in: path
    type: string
    required: true
    description: ID of an component type

  app:
    name: app
    in: body
    schema:
      type: object
      required:
        - name
        - repo
      properties:
        name:
          type: string
          example: YACME API
          description: App name
        repo:
          type: string
          example: https://github.com/gaorlov/YACME
          description: Github repo URL
        description:
          type: string
          example: Config manager api
          description: |
            [OPTIONAL] Description of app

  component-type:
    name: component-type
    in: body
    schema:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          example: http://rds-postgres-component.internal.example.com
          description: url to component_type service to be used to register a component service

  component:
    name: component
    in: body
    schema:
      type: object
      required:
        - params
      properties:
        params:
          type: object
          example:
            PD_USERNAME: root
            PG_PASSWORD: root-pass
            PG_HOST: postgres.internal.example.com
            PG_PORT: 5432
          description: Param set for app-specific component definition
        dependencies:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: name of component
              action:
                type: string
                enum:
                  - create
                  - check
                  - update
                  - delete
                  - execute
                description: component action
          example:
            - unit-tests: execute
              kafka: create
          description: array of component actions that need to pass before the current action will run.